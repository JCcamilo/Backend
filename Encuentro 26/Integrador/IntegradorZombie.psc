// Ingresar la cadena en una variable
// Determinar la dimensión de la matriz
// Asignar la cadena a una matriz
// Evaluar la diagonal principal e inversa
// Determinar si posee el virus

SubProceso LlenarMatriz(matriz, M, string)
	Definir i, j, pos Como Entero
	
	pos = 0
	Escribir "La muestra es adecuada y posee una longitud de ", M*M, " caracteres:"
	
	Para i = 0 Hasta M-1
		Escribir "|" Sin Saltar
		Para j = 0 Hasta M-1
			matriz[i,j] = Subcadena(string, pos, pos)
			pos = pos + 1
			
			Escribir matriz[i,j], "|" Sin Saltar
		FinPara
		Escribir ""
	FinPara
	
FinSubProceso

Funcion resultado <- EvaluarDiag(matriz, M)
	Definir diag, diagInv Como Caracter
	Definir i Como Entero
	Definir resultado Como Logico
	
	diag = matriz[0,0]
	diagInv = matriz[0,M-1]
	resultado = Verdadero
	
	Para i = 1 Hasta M-1
		Si diag <> matriz[i,i] O diagInv <> matriz[i,M-1-i] // Comparar elementos de las diagonales
			resultado = Falso
			i = M-1 // Terminar ciclo
		FinSi
		diag = matriz[i,i] // Recorrer diagonal principal
		diagInv = matriz[i,M-1-i] // Recorrer diagonal inversa
	FinPara
FinFuncion

SubProceso validacion <- ValidarMuestra(string) // Validar que la muestra tenga las características correctas
	Definir i, len Como Entero
	Definir base Como Caracter
	Definir validacion Como Logico
	
	validacion = Falso
	len = Longitud(string)
	
	Si len == 3*3 O len == 4*4 O len == 37*37 // Validar que posea la longitud correcta
		Para i = 0 Hasta Longitud(string)-1
			base = Subcadena(string,i,i)
			Si base == "A" O base == "B" O base == "C" O base == "D" // Validar que posea las bases correctas
				validacion = Verdadero
			SiNo
				i = Longitud(string) // Terminar ciclo
			FinSi
		FinPara
	FinSi
FinSubProceso

Algoritmo IntegradorZombie
	Definir muestra, matriz Como Caracter
	Definir M Como Entero
	
	muestra = "ACABADA"
//	muestra = "CACBCACAC" /// Positivo
//	muestra = "ADDDABBDD" /// Negativo
//	muestra = "CDDACCACCACAAABC" /// Positivo
//	muestra = "ABAABBCBD" /// Negativo
//	muestra = "BCBBABBACBBBBCBB" /// Positivo
//	muestra = "BCAADCCBABCCBABB" /// Negativo
//	muestra = "CCADDBACCDDDDBDBCCABBAABDBCDCADDABABCDCDDABBBCABBABBDCADCCDABDDACDBBBDBDCCDDCABCAAAACDCDCCACDCDDADAADDACBDBCCDDBCBCBBAAADDAADCAABBBCBCCBCBDBCCBBCBABADAACDBDBADCBBACDADAADABBDBDBDBDCCDDCABCCCCCADBBBBCCDACCBBBDBDAADDBCCBCCBCBDDDDCCBAAACDDBBCAABAADABBBCCCCDCCBBDCDABCDACBCBACDBCCDABDBDCDCADCCBBADDBDCCADCCDCCACCDCDBCDBBADBAADBBCAADDABCAADADAABAACCBABDADADADDBCABDCCBBAADDDCDDCBADBCACCAAADCCDDABDBACBCAAADDBADBDACDDBDCBDCCCDDCACBCCCACCCCBACBAAAAACBCBCDAADCAACBCABDDABCBCBACCADABBBABBBBBAACADDDDBABACADAAABDDDCCDCACAACACADADBABACBABDBBADCDBBDACDCAABCADDBDBDCAABDCDABDDADDCDDBCBCDADCDBBDACABCDAABBCBADDDBCBADCABACDCABBCBCBCBCADBABBDBCCCADCADDCBABBDDDBBCBCDABACDDDABCCDBACCBDBADADDDAAACBDCDCCAACBDDCDCBADACDDDDBDCBAACDADBBDBDBCCACADBAABBAADAADDDACDDCDBDDBBDAADDAACCCACDBBBBBDCDCDDDABBCBAAADACADDCDCDCBCDCACAAABCADBDBBDDACCBBDABDDBCADCCCADDCDBACBBBDAADDCDAAADBBCDADBDBCBDDCAABCCDCCDCABCAACADADAACADDBBDABAABACDACDCDBBDDCCBCBCAAACBDBDBBBDBDBBCADCBACDCCBDACBBACBCADCDBACCADCDBDCDBBACBBCDCAAAAABCCDDCDDBBCBABCBCAABDBCCACBABDCABAACBDBDBCCCCADBBCDCCCAABADBACDDBADCDCAADDDCBDDBDCDCCCCCCCDBCDDBACBBCDACDADCACBDBBCCCDCCBCBCDACBDDDACCCAADBDBBDADDCCDDDBCDABCCBACCCCCBAACCBCABAAABBCABBCACCCABCDACBCDBDACACDDCACBCBBCCADABCBBDDABADDAAABACCBDCDABCBBBBACCDABAACDCACCCBBCDDACCDBCBCBAACBBBBADBCBCDABAAAABADAAAACDACADACDBBCCABADDDCACDCAACCDABBDBDAABADDBDCCCACDADBDDDCBBCBDCADCBCDAABDDDDBBBBCDDCC"
	// ^ Positivo
//	muestra = "ACCDBBADDDCCBACABDCBDCBADBDACBBBBDAABBCCBAACCABDBDCDDABDBDADAAACBBBBCDDDCBBBDDCDABBDDABDBDBBACADCDAAADACDDDACCDCACDDABACDCCCAABDDCCACDADDBCBAACCDBCBCDDDCAACCBAADCBBBCDCBBACBDCCDDADBABCAABBACABDCAACCBDADDCAAACCDBDBBCDDDDDACBCDDADDDDCBADADBDCADDABBCDAACBCCDDDADDADADAACCACDCDDABCCCADABBACDACCAADDBCBCCDADBCCADAAABDDDAABBABCADDCCAADDCDDCDCACBADADACADDAADCBDBCDBDDACDCBCDCCABBDCBACDDACCCDADBCADCACAAABBBCADDDDBCBACDBDAAADDDACCDACBBBADACCCDCACCBACDADBCBBDADACABAACBCCADDCCCCACCCCADBCCDAADCAABBABAADDBDADDABABCCABBCDDACCADAAADBBCCDBADCADCBBDADACCDDBCAAABBBDCAAAACBAADBABBABACDDBBCBDCDCADABABBDADCBADAACDBCBDABADBCBADCACADAABCDDCABACDDBDCBCBDCAAACBDABBCACBACCCBACACDCADBDCDCDDCAACDBDCBACDBBDAABDBBCBAAADBABDBAACAAACDCDAAABABDDDBCACADCBBAADCCDABCCCBBCACCBAABDAADDDCDACDDDBCDCCBABDABACCDCDCDABAABCABBADADCBDDACDDCDDCDACDADADCACBCDABABDDCCDBCCDABACDBDAABDBDDDBADDBACABDCDDBACDDBBDDBBACBCCAACABBDADDBCAACCBCCDADDBCAADDADCCCBAAABABBBBBCABAACADBCBBABACCABCDAABADCCCCDCCADDDCCABBDDDAAADDADACBBBCBDAADACABABBAACCCADADDABDBCADDDCCDBBCCBCDCDBDDDDCACDACDBBBDDBADDACADDADDABCACDCBBADDABBBDCBBDCDAABADDDDDBCACCCCAAACBCBCDBACCCDACCCDBCBDCBADBCDDACCDBDBDBCAAACDDCBAABDBCAADCADDBABABDCBCBCBBBCACBCADDCAAAAAACBBACBBCCACBDCDDDDADCAAACBABDDBDADBAADCBABDDBCDBABDBAADDDBACBBBCCCDBDDBDDAADBBADADDDCBCACBABCDBBABAADABCABCDBACBBBCDBADADDBDCBDABBDDDCDDCCACDCBDCADABAABCDCAACCDDBADBDBCDACAAACBCADCCCBAC"
	// ^ Negativo


	Si ValidarMuestra(muestra)
		M = Longitud(muestra)^(1/2)
		Dimension matriz[M,M]
		
		LlenarMatriz(matriz, M, muestra)
		Escribir "Es ", EvaluarDiag(matriz, M), " que la muestra posee el Gen Z" 
	SiNo
		Escribir "La muestra no posee las características adecuadas, no es posible crear una matriz cuadrada o posee bases erróneas"
	FinSi
FinAlgoritmo